// Generated by admPyClass.pl from binding/GUI.admPyClass, DO NOT edit !
// QtGuiExit -> void pyQtGuiExit(IEditor)
static tp_obj zzpy_QtGuiExit(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  pyQtGuiExit(p0);
  return tp_None;
}
// QtGuiSetBusyCursor -> void pyQtGuiSetBusyCursor(IEditor int)
static tp_obj zzpy_QtGuiSetBusyCursor(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  int p1 = pm.asInt();
  pyQtGuiSetBusyCursor(p0, p1);
  return tp_None;
}
// QtGuiSetDarkTheme -> void pyQtGuiSetDarkTheme(IEditor)
static tp_obj zzpy_QtGuiSetDarkTheme(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  pyQtGuiSetDarkTheme(p0);
  return tp_None;
}
// QtGuiSetLighTheme -> void pyQtGuiSetLighTheme(IEditor)
static tp_obj zzpy_QtGuiSetLighTheme(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  pyQtGuiSetLighTheme(p0);
  return tp_None;
}
// QtGuiSetPlayFiltered -> void pyQtGuiSetPlayFiltered(IEditor int)
static tp_obj zzpy_QtGuiSetPlayFiltered(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  int p1 = pm.asInt();
  pyQtGuiSetPlayFiltered(p0, p1);
  return tp_None;
}
// QtGuiStatusbarError -> void pyQtGuiStatusbarError(IEditor str int)
static tp_obj zzpy_QtGuiStatusbarError(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  int p2 = pm.asInt();
  pyQtGuiStatusbarError(p0, p1, p2);
  return tp_None;
}
// QtGuiStatusbarInfo -> void pyQtGuiStatusbarInfo(IEditor str int)
static tp_obj zzpy_QtGuiStatusbarInfo(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  int p2 = pm.asInt();
  pyQtGuiStatusbarInfo(p0, p1, p2);
  return tp_None;
}
// QtGuiStatusbarWarning -> void pyQtGuiStatusbarWarning(IEditor str int)
static tp_obj zzpy_QtGuiStatusbarWarning(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  int p2 = pm.asInt();
  pyQtGuiStatusbarWarning(p0, p1, p2);
  return tp_None;
}
// QtGuiTextToClipboard -> void pyQtGuiTextToClipboard(IEditor str)
static tp_obj zzpy_QtGuiTextToClipboard(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  pyQtGuiTextToClipboard(p0, p1);
  return tp_None;
}
// QtGuiWindowMinimize -> void pyQtGuiWindowMinimize(IEditor)
static tp_obj zzpy_QtGuiWindowMinimize(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  pyQtGuiWindowMinimize(p0);
  return tp_None;
}
// QtGuiWindowRestore -> void pyQtGuiWindowRestore(IEditor)
static tp_obj zzpy_QtGuiWindowRestore(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  pyQtGuiWindowRestore(p0);
  return tp_None;
}
// QtGuiWindowSetTitle -> void pyQtGuiWindowSetTitle(IEditor str)
static tp_obj zzpy_QtGuiWindowSetTitle(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  pyQtGuiWindowSetTitle(p0, p1);
  return tp_None;
}
// dirSelect -> str pyDirSelect(IEditor str)
static tp_obj zzpy_dirSelect(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r = pyDirSelect(p0, p1);
  if(!r) return tp_None;

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// displayError -> void pyDisplayError(IEditor str str)
static tp_obj zzpy_displayError(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  pyDisplayError(p0, p1, p2);
  return tp_None;
}
// displayInfo -> void pyDisplayInfo(IEditor str str)
static tp_obj zzpy_displayInfo(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  pyDisplayInfo(p0, p1, p2);
  return tp_None;
}
// fileReadSelect -> str pyFileSelRead(IEditor str)
static tp_obj zzpy_fileReadSelect(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r = pyFileSelRead(p0, p1);
  if(!r) return tp_None;

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// fileReadSelectEx -> str pyFileSelReadEx(IEditor str str)
static tp_obj zzpy_fileReadSelectEx(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  char *r = pyFileSelReadEx(p0, p1, p2);
  if(!r) return tp_None;

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// fileWriteSelect -> str pyFileSelWrite(IEditor str)
static tp_obj zzpy_fileWriteSelect(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r = pyFileSelWrite(p0, p1);
  if(!r) return tp_None;

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// fileWriteSelectEx -> str pyFileSelWriteEx(IEditor str str)
static tp_obj zzpy_fileWriteSelectEx(TP)
{
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  char *r = pyFileSelWriteEx(p0, p1, p2);
  if(!r) return tp_None;

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
tp_obj zzpy__pyGui_get(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);
  char const *key = pm.asString();
  if (!strcmp(key, "QtGuiExit"))
  {
    return tp_method(vm, self, zzpy_QtGuiExit);
  }
  if (!strcmp(key, "QtGuiSetBusyCursor"))
  {
    return tp_method(vm, self, zzpy_QtGuiSetBusyCursor);
  }
  if (!strcmp(key, "QtGuiSetDarkTheme"))
  {
    return tp_method(vm, self, zzpy_QtGuiSetDarkTheme);
  }
  if (!strcmp(key, "QtGuiSetLighTheme"))
  {
    return tp_method(vm, self, zzpy_QtGuiSetLighTheme);
  }
  if (!strcmp(key, "QtGuiSetPlayFiltered"))
  {
    return tp_method(vm, self, zzpy_QtGuiSetPlayFiltered);
  }
  if (!strcmp(key, "QtGuiStatusbarError"))
  {
    return tp_method(vm, self, zzpy_QtGuiStatusbarError);
  }
  if (!strcmp(key, "QtGuiStatusbarInfo"))
  {
    return tp_method(vm, self, zzpy_QtGuiStatusbarInfo);
  }
  if (!strcmp(key, "QtGuiStatusbarWarning"))
  {
    return tp_method(vm, self, zzpy_QtGuiStatusbarWarning);
  }
  if (!strcmp(key, "QtGuiTextToClipboard"))
  {
    return tp_method(vm, self, zzpy_QtGuiTextToClipboard);
  }
  if (!strcmp(key, "QtGuiWindowMinimize"))
  {
    return tp_method(vm, self, zzpy_QtGuiWindowMinimize);
  }
  if (!strcmp(key, "QtGuiWindowRestore"))
  {
    return tp_method(vm, self, zzpy_QtGuiWindowRestore);
  }
  if (!strcmp(key, "QtGuiWindowSetTitle"))
  {
    return tp_method(vm, self, zzpy_QtGuiWindowSetTitle);
  }
  if (!strcmp(key, "dirSelect"))
  {
    return tp_method(vm, self, zzpy_dirSelect);
  }
  if (!strcmp(key, "displayError"))
  {
    return tp_method(vm, self, zzpy_displayError);
  }
  if (!strcmp(key, "displayInfo"))
  {
    return tp_method(vm, self, zzpy_displayInfo);
  }
  if (!strcmp(key, "fileReadSelect"))
  {
    return tp_method(vm, self, zzpy_fileReadSelect);
  }
  if (!strcmp(key, "fileReadSelectEx"))
  {
    return tp_method(vm, self, zzpy_fileReadSelectEx);
  }
  if (!strcmp(key, "fileWriteSelect"))
  {
    return tp_method(vm, self, zzpy_fileWriteSelect);
  }
  if (!strcmp(key, "fileWriteSelectEx"))
  {
    return tp_method(vm, self, zzpy_fileWriteSelectEx);
  }
  return tp_get(vm, self, tp_string(key));
}
tp_obj zzpy__pyGui_set(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);
  char const *key = pm.asString();
  return tp_None;
}
// Dctor
static void myDtorpyGui(tp_vm *vm,tp_obj self)
{
}
// Ctor ()
static tp_obj myCtorpyGui(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  TinyParams pm(vm);
  void *me = NULL;
  tp_obj cdata = tp_data(vm, ADM_PYID_GUI, me);
  cdata.data.info->xfree = myDtorpyGui;
  tp_set(vm, self, tp_string("cdata"), cdata);
  return tp_None;
}
static tp_obj zzpy__pyGui_help(TP)
{
  PythonEngine *engine = (PythonEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;

  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "constructor:\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "obj	Gui()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "methods:\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiExit()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiSetBusyCursor(int busy)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiSetDarkTheme()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiSetLighTheme()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiSetPlayFiltered(int enable)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiStatusbarError(str msg, int timeoutMs)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiStatusbarInfo(str msg, int timeoutMs)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiStatusbarWarning(str msg, int timeoutMs)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiTextToClipboard(str msg)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiWindowMinimize()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiWindowRestore()\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t QtGuiWindowSetTitle(str title)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "str\t dirSelect(str title)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t displayError(str primaryMsg, str secondaryMsg)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "void\t displayInfo(str primaryMsg, str secondaryMsg)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "str\t fileReadSelect(str title)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "str\t fileReadSelectEx(str title, str extension)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "str\t fileWriteSelect(str title)\n");
  engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "str\t fileWriteSelectEx(str title, str extension)\n");

  return tp_None;
}
tp_obj initClasspyGui(tp_vm *vm)
{
  tp_obj myClass = tp_class(vm);
  tp_set(vm,myClass, tp_string("__init__"), tp_fnc(vm,myCtorpyGui));
  tp_set(vm,myClass, tp_string("__set__"), tp_fnc(vm,zzpy__pyGui_set));
  tp_set(vm,myClass, tp_string("__get__"), tp_fnc(vm,zzpy__pyGui_get));
  tp_set(vm,myClass, tp_string("help"), tp_fnc(vm,zzpy__pyGui_help));
  return myClass;
}
